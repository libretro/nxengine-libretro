//hash:86bec1cb
//automatically generated by Makegen

/* located in main.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
void visible_warning(const char *fmt, ...);


/* located in sound/sslib.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
void SSReserveChannel(int c);
void SSSetVolume(int c, int newvol);
void SSAbortChannel(int c);
int SSEnqueueChunk(int c, signed short *buffer, int len, int userdata, void(*FinishedCB)(int, int));
char SSChannelPlaying(int c);
int SSGetCurUserData(int c);
int SSGetSamplePos(int c);


/* located in sound/org.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
static void init_pitch(void);
static float_type GetNoteSampleRate(int note, int instrument_pitch);
static int MSToSamples(int ms);
static int SamplesToMS(int samples);
static bool load_drumtable(const char *pxt_path);
static bool load_drum(char *fname, int d);
static bool load_drum_pxt(FILE *fd, int s, int d);
int org_init(FILE *fp, int org_volume);
void org_close(void);
char org_load(char *fname);
static bool init_buffers(void);
static void free_buffers(void);
bool org_start(int startbeat);
void org_stop(void);
bool org_is_playing(void);
void org_fade(void);
void org_set_volume(int newvolume);
static void runfade();
static void mix_buffers(void);
static void queue_final_buffer(void);
static void OrgBufferFinished(int channel, int buffer_no);
static void ComputeVolumeRatios(int volume, int panning, double *volume_ratio, double *volume_left_ratio, double *volume_right_ratio);
static double Interpolate(int sample1, int sample2, double ratio);
static void ForceSamplePos(int m, int desired_samples);
static void silence_gen(stNoteChannel *chan, int num_samples);
static void note_open(stNoteChannel *chan, int wave, int pitch, int note);
static void note_gen(stNoteChannel *chan, int num_samples);
static int note_close(stNoteChannel *chan);
static int drum_open(int m_channel, int wave, int note);
static void drum_gen(int m_channel, int num_samples);
void org_run(void);
static void generate_music(void);
static void NextBeat(int m);
int org_GetCurrentBeat(void);
int org_GetCurrentBuffer(void);


/* located in sound/pxt.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
char pxt_initsynth(void);
char pxt_load(FILE *fp, stPXSound *snd, int slot);
char pxt_Render(stPXSound *snd);
void FreePXTBuf(stPXSound *snd);


/* located in common/stat.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
void stat(const char *fmt, ...);
void staterr(const char *fmt, ...);


/* located in common/misc.cpp */

//-------------------[referenced from sound/org.cpp]-----------------//
uint32_t fgetl(FILE *fp);
void fputl(uint32_t word, FILE *fp);
uint16_t fgeti(FILE *fp);

